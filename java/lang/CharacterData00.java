package java.lang;

class CharacterData00 extends CharacterData {
  int getProperties(int paramInt) {
    char c = (char)paramInt;
    return A[Y[X[c >> 5] | c >> 1 & 0xF] | c & 0x1];
  }
  
  int getPropertiesEx(int paramInt) {
    char c = (char)paramInt;
    return B[Y[X[c >> 5] | c >> 1 & 0xF] | c & 0x1];
  }
  
  int getType(int paramInt) {
    int i = getProperties(paramInt);
    return i & 0x1F;
  }
  
  boolean isOtherLowercase(int paramInt) {
    int i = getPropertiesEx(paramInt);
    return ((i & 0x1) != 0);
  }
  
  boolean isOtherUppercase(int paramInt) {
    int i = getPropertiesEx(paramInt);
    return ((i & 0x2) != 0);
  }
  
  boolean isOtherAlphabetic(int paramInt) {
    int i = getPropertiesEx(paramInt);
    return ((i & 0x4) != 0);
  }
  
  boolean isIdeographic(int paramInt) {
    int i = getPropertiesEx(paramInt);
    return ((i & 0x10) != 0);
  }
  
  boolean isJavaIdentifierStart(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x7000) >= 20480);
  }
  
  boolean isJavaIdentifierPart(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x3000) != 0);
  }
  
  boolean isUnicodeIdentifierStart(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x7000) == 28672);
  }
  
  boolean isUnicodeIdentifierPart(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x1000) != 0);
  }
  
  boolean isIdentifierIgnorable(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x7000) == 4096);
  }
  
  int toLowerCase(int paramInt) {
    int i = paramInt;
    int j = getProperties(paramInt);
    if ((j & 0x20000) != 0)
      if ((j & 0x7FC0000) == 133955584) {
        switch (paramInt) {
          case 304:
            i = 105;
            break;
          case 8486:
            i = 969;
            break;
          case 8490:
            i = 107;
            break;
          case 8491:
            i = 229;
            break;
          case 8072:
            i = 8064;
            break;
          case 8073:
            i = 8065;
            break;
          case 8074:
            i = 8066;
            break;
          case 8075:
            i = 8067;
            break;
          case 8076:
            i = 8068;
            break;
          case 8077:
            i = 8069;
            break;
          case 8078:
            i = 8070;
            break;
          case 8079:
            i = 8071;
            break;
          case 8088:
            i = 8080;
            break;
          case 8089:
            i = 8081;
            break;
          case 8090:
            i = 8082;
            break;
          case 8091:
            i = 8083;
            break;
          case 8092:
            i = 8084;
            break;
          case 8093:
            i = 8085;
            break;
          case 8094:
            i = 8086;
            break;
          case 8095:
            i = 8087;
            break;
          case 8104:
            i = 8096;
            break;
          case 8105:
            i = 8097;
            break;
          case 8106:
            i = 8098;
            break;
          case 8107:
            i = 8099;
            break;
          case 8108:
            i = 8100;
            break;
          case 8109:
            i = 8101;
            break;
          case 8110:
            i = 8102;
            break;
          case 8111:
            i = 8103;
            break;
          case 8124:
            i = 8115;
            break;
          case 8140:
            i = 8131;
            break;
          case 8188:
            i = 8179;
            break;
          case 570:
            i = 11365;
            break;
          case 574:
            i = 11366;
            break;
          case 4256:
            i = 11520;
            break;
          case 4257:
            i = 11521;
            break;
          case 4258:
            i = 11522;
            break;
          case 4259:
            i = 11523;
            break;
          case 4260:
            i = 11524;
            break;
          case 4261:
            i = 11525;
            break;
          case 4262:
            i = 11526;
            break;
          case 4263:
            i = 11527;
            break;
          case 4264:
            i = 11528;
            break;
          case 4265:
            i = 11529;
            break;
          case 4266:
            i = 11530;
            break;
          case 4267:
            i = 11531;
            break;
          case 4268:
            i = 11532;
            break;
          case 4269:
            i = 11533;
            break;
          case 4270:
            i = 11534;
            break;
          case 4271:
            i = 11535;
            break;
          case 4272:
            i = 11536;
            break;
          case 4273:
            i = 11537;
            break;
          case 4274:
            i = 11538;
            break;
          case 4275:
            i = 11539;
            break;
          case 4276:
            i = 11540;
            break;
          case 4277:
            i = 11541;
            break;
          case 4278:
            i = 11542;
            break;
          case 4279:
            i = 11543;
            break;
          case 4280:
            i = 11544;
            break;
          case 4281:
            i = 11545;
            break;
          case 4282:
            i = 11546;
            break;
          case 4283:
            i = 11547;
            break;
          case 4284:
            i = 11548;
            break;
          case 4285:
            i = 11549;
            break;
          case 4286:
            i = 11550;
            break;
          case 4287:
            i = 11551;
            break;
          case 4288:
            i = 11552;
            break;
          case 4289:
            i = 11553;
            break;
          case 4290:
            i = 11554;
            break;
          case 4291:
            i = 11555;
            break;
          case 4292:
            i = 11556;
            break;
          case 4293:
            i = 11557;
            break;
          case 4295:
            i = 11559;
            break;
          case 4301:
            i = 11565;
            break;
          case 7838:
            i = 223;
            break;
          case 11362:
            i = 619;
            break;
          case 11363:
            i = 7549;
            break;
          case 11364:
            i = 637;
            break;
          case 11373:
            i = 593;
            break;
          case 11374:
            i = 625;
            break;
          case 11375:
            i = 592;
            break;
          case 11376:
            i = 594;
            break;
          case 11390:
            i = 575;
            break;
          case 11391:
            i = 576;
            break;
          case 42877:
            i = 7545;
            break;
          case 42893:
            i = 613;
            break;
          case 42922:
            i = 614;
            break;
        } 
      } else {
        int k = j << 5 >> 23;
        i = paramInt + k;
      }  
    return i;
  }
  
  int toUpperCase(int paramInt) {
    int i = paramInt;
    int j = getProperties(paramInt);
    if ((j & 0x10000) != 0)
      if ((j & 0x7FC0000) == 133955584) {
        switch (paramInt) {
          case 181:
            i = 924;
            break;
          case 383:
            i = 83;
            break;
          case 8126:
            i = 921;
            break;
          case 8064:
            i = 8072;
            break;
          case 8065:
            i = 8073;
            break;
          case 8066:
            i = 8074;
            break;
          case 8067:
            i = 8075;
            break;
          case 8068:
            i = 8076;
            break;
          case 8069:
            i = 8077;
            break;
          case 8070:
            i = 8078;
            break;
          case 8071:
            i = 8079;
            break;
          case 8080:
            i = 8088;
            break;
          case 8081:
            i = 8089;
            break;
          case 8082:
            i = 8090;
            break;
          case 8083:
            i = 8091;
            break;
          case 8084:
            i = 8092;
            break;
          case 8085:
            i = 8093;
            break;
          case 8086:
            i = 8094;
            break;
          case 8087:
            i = 8095;
            break;
          case 8096:
            i = 8104;
            break;
          case 8097:
            i = 8105;
            break;
          case 8098:
            i = 8106;
            break;
          case 8099:
            i = 8107;
            break;
          case 8100:
            i = 8108;
            break;
          case 8101:
            i = 8109;
            break;
          case 8102:
            i = 8110;
            break;
          case 8103:
            i = 8111;
            break;
          case 8115:
            i = 8124;
            break;
          case 8131:
            i = 8140;
            break;
          case 8179:
            i = 8188;
            break;
          case 575:
            i = 11390;
            break;
          case 576:
            i = 11391;
            break;
          case 592:
            i = 11375;
            break;
          case 593:
            i = 11373;
            break;
          case 594:
            i = 11376;
            break;
          case 613:
            i = 42893;
            break;
          case 614:
            i = 42922;
            break;
          case 619:
            i = 11362;
            break;
          case 625:
            i = 11374;
            break;
          case 637:
            i = 11364;
            break;
          case 7545:
            i = 42877;
            break;
          case 7549:
            i = 11363;
            break;
          case 11365:
            i = 570;
            break;
          case 11366:
            i = 574;
            break;
          case 11520:
            i = 4256;
            break;
          case 11521:
            i = 4257;
            break;
          case 11522:
            i = 4258;
            break;
          case 11523:
            i = 4259;
            break;
          case 11524:
            i = 4260;
            break;
          case 11525:
            i = 4261;
            break;
          case 11526:
            i = 4262;
            break;
          case 11527:
            i = 4263;
            break;
          case 11528:
            i = 4264;
            break;
          case 11529:
            i = 4265;
            break;
          case 11530:
            i = 4266;
            break;
          case 11531:
            i = 4267;
            break;
          case 11532:
            i = 4268;
            break;
          case 11533:
            i = 4269;
            break;
          case 11534:
            i = 4270;
            break;
          case 11535:
            i = 4271;
            break;
          case 11536:
            i = 4272;
            break;
          case 11537:
            i = 4273;
            break;
          case 11538:
            i = 4274;
            break;
          case 11539:
            i = 4275;
            break;
          case 11540:
            i = 4276;
            break;
          case 11541:
            i = 4277;
            break;
          case 11542:
            i = 4278;
            break;
          case 11543:
            i = 4279;
            break;
          case 11544:
            i = 4280;
            break;
          case 11545:
            i = 4281;
            break;
          case 11546:
            i = 4282;
            break;
          case 11547:
            i = 4283;
            break;
          case 11548:
            i = 4284;
            break;
          case 11549:
            i = 4285;
            break;
          case 11550:
            i = 4286;
            break;
          case 11551:
            i = 4287;
            break;
          case 11552:
            i = 4288;
            break;
          case 11553:
            i = 4289;
            break;
          case 11554:
            i = 4290;
            break;
          case 11555:
            i = 4291;
            break;
          case 11556:
            i = 4292;
            break;
          case 11557:
            i = 4293;
            break;
          case 11559:
            i = 4295;
            break;
          case 11565:
            i = 4301;
            break;
        } 
      } else {
        int k = j << 5 >> 23;
        i = paramInt - k;
      }  
    return i;
  }
  
  int toTitleCase(int paramInt) {
    int i = paramInt;
    int j = getProperties(paramInt);
    if ((j & 0x8000) != 0) {
      if ((j & 0x10000) == 0) {
        i = paramInt + 1;
      } else if ((j & 0x20000) == 0) {
        i = paramInt - 1;
      } 
    } else if ((j & 0x10000) != 0) {
      i = toUpperCase(paramInt);
    } 
    return i;
  }
  
  int digit(int paramInt1, int paramInt2) {
    int i = -1;
    if (paramInt2 >= 2 && paramInt2 <= 36) {
      int j = getProperties(paramInt1);
      int k = j & 0x1F;
      if (k == 9) {
        i = paramInt1 + ((j & 0x3E0) >> 5) & 0x1F;
      } else if ((j & 0xC00) == 3072) {
        i = (paramInt1 + ((j & 0x3E0) >> 5) & 0x1F) + 10;
      } 
    } 
    return (i < paramInt2) ? i : -1;
  }
  
  int getNumericValue(int paramInt) {
    int i = getProperties(paramInt);
    int j = -1;
    switch (i & 0xC00) {
      default:
        j = -1;
        return j;
      case 1024:
        j = paramInt + ((i & 0x3E0) >> 5) & 0x1F;
        return j;
      case 2048:
        switch (paramInt) {
          case 3057:
            j = 100;
            return j;
          case 3058:
            j = 1000;
            return j;
          case 4981:
            j = 40;
            return j;
          case 4982:
            j = 50;
            return j;
          case 4983:
            j = 60;
            return j;
          case 4984:
            j = 70;
            return j;
          case 4985:
            j = 80;
            return j;
          case 4986:
            j = 90;
            return j;
          case 4987:
            j = 100;
            return j;
          case 4988:
            j = 10000;
            return j;
          case 8543:
            j = 1;
            return j;
          case 8556:
            j = 50;
            return j;
          case 8557:
            j = 100;
            return j;
          case 8558:
            j = 500;
            return j;
          case 8559:
            j = 1000;
            return j;
          case 8572:
            j = 50;
            return j;
          case 8573:
            j = 100;
            return j;
          case 8574:
            j = 500;
            return j;
          case 8575:
            j = 1000;
            return j;
          case 8576:
            j = 1000;
            return j;
          case 8577:
            j = 5000;
            return j;
          case 8578:
            j = 10000;
            return j;
          case 12875:
            j = 40;
            return j;
          case 12876:
            j = 50;
            return j;
          case 12877:
            j = 60;
            return j;
          case 12878:
            j = 70;
            return j;
          case 12879:
            j = 80;
            return j;
          case 12892:
            j = 32;
            return j;
          case 12893:
            j = 33;
            return j;
          case 12894:
            j = 34;
            return j;
          case 12895:
            j = 35;
            return j;
          case 12977:
            j = 36;
            return j;
          case 12978:
            j = 37;
            return j;
          case 12979:
            j = 38;
            return j;
          case 12980:
            j = 39;
            return j;
          case 12981:
            j = 40;
            return j;
          case 12982:
            j = 41;
            return j;
          case 12983:
            j = 42;
            return j;
          case 12984:
            j = 43;
            return j;
          case 12985:
            j = 44;
            return j;
          case 12986:
            j = 45;
            return j;
          case 12987:
            j = 46;
            return j;
          case 12988:
            j = 47;
            return j;
          case 12989:
            j = 48;
            return j;
          case 12990:
            j = 49;
            return j;
          case 12991:
            j = 50;
            return j;
          case 3441:
            j = 100;
            return j;
          case 3442:
            j = 1000;
            return j;
          case 8582:
            j = 50;
            return j;
          case 8583:
            j = 50000;
            return j;
          case 8584:
            j = 100000;
            return j;
        } 
        j = -2;
        return j;
      case 3072:
        break;
    } 
    j = (paramInt + ((i & 0x3E0) >> 5) & 0x1F) + 10;
    return j;
  }
  
  boolean isWhitespace(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & 0x7000) == 16384);
  }
  
  byte getDirectionality(int paramInt) {
    int i = getProperties(paramInt);
    byte b = (byte)((i & 0x78000000) >> 27);
    if (b == 15) {
      switch (paramInt) {
        case 8234:
          b = 14;
          return b;
        case 8235:
          b = 16;
          return b;
        case 8236:
          b = 18;
          return b;
        case 8237:
          b = 15;
          return b;
        case 8238:
          b = 17;
          return b;
      } 
      b = -1;
    } 
    return b;
  }
  
  boolean isMirrored(int paramInt) {
    int i = getProperties(paramInt);
    return ((i & Integer.MIN_VALUE) != 0);
  }
  
  int toUpperCaseEx(int paramInt) {
    int i = paramInt;
    int j = getProperties(paramInt);
    if ((j & 0x10000) != 0)
      if ((j & 0x7FC0000) != 133955584) {
        int k = j << 5 >> 23;
        i = paramInt - k;
      } else {
        switch (paramInt) {
          case 181:
            i = 924;
            return i;
          case 383:
            i = 83;
            return i;
          case 8126:
            i = 921;
            return i;
          case 575:
            i = 11390;
            return i;
          case 576:
            i = 11391;
            return i;
          case 592:
            i = 11375;
            return i;
          case 593:
            i = 11373;
            return i;
          case 594:
            i = 11376;
            return i;
          case 613:
            i = 42893;
            return i;
          case 614:
            i = 42922;
            return i;
          case 619:
            i = 11362;
            return i;
          case 625:
            i = 11374;
            return i;
          case 637:
            i = 11364;
            return i;
          case 7545:
            i = 42877;
            return i;
          case 7549:
            i = 11363;
            return i;
          case 11365:
            i = 570;
            return i;
          case 11366:
            i = 574;
            return i;
          case 11520:
            i = 4256;
            return i;
          case 11521:
            i = 4257;
            return i;
          case 11522:
            i = 4258;
            return i;
          case 11523:
            i = 4259;
            return i;
          case 11524:
            i = 4260;
            return i;
          case 11525:
            i = 4261;
            return i;
          case 11526:
            i = 4262;
            return i;
          case 11527:
            i = 4263;
            return i;
          case 11528:
            i = 4264;
            return i;
          case 11529:
            i = 4265;
            return i;
          case 11530:
            i = 4266;
            return i;
          case 11531:
            i = 4267;
            return i;
          case 11532:
            i = 4268;
            return i;
          case 11533:
            i = 4269;
            return i;
          case 11534:
            i = 4270;
            return i;
          case 11535:
            i = 4271;
            return i;
          case 11536:
            i = 4272;
            return i;
          case 11537:
            i = 4273;
            return i;
          case 11538:
            i = 4274;
            return i;
          case 11539:
            i = 4275;
            return i;
          case 11540:
            i = 4276;
            return i;
          case 11541:
            i = 4277;
            return i;
          case 11542:
            i = 4278;
            return i;
          case 11543:
            i = 4279;
            return i;
          case 11544:
            i = 4280;
            return i;
          case 11545:
            i = 4281;
            return i;
          case 11546:
            i = 4282;
            return i;
          case 11547:
            i = 4283;
            return i;
          case 11548:
            i = 4284;
            return i;
          case 11549:
            i = 4285;
            return i;
          case 11550:
            i = 4286;
            return i;
          case 11551:
            i = 4287;
            return i;
          case 11552:
            i = 4288;
            return i;
          case 11553:
            i = 4289;
            return i;
          case 11554:
            i = 4290;
            return i;
          case 11555:
            i = 4291;
            return i;
          case 11556:
            i = 4292;
            return i;
          case 11557:
            i = 4293;
            return i;
          case 11559:
            i = 4295;
            return i;
          case 11565:
            i = 4301;
            return i;
        } 
        i = -1;
      }  
    return i;
  }
  
  char[] toUpperCaseCharArray(int paramInt) {
    char[] arrayOfChar = { (char)paramInt };
    int i = findInCharMap(paramInt);
    if (i != -1)
      arrayOfChar = charMap[i][1]; 
    return arrayOfChar;
  }
  
  int findInCharMap(int paramInt) {
    if (charMap == null || charMap.length == 0)
      return -1; 
    int j = 0;
    int i = charMap.length;
    int k = i / 2;
    while (i - j > 1) {
      if (paramInt >= charMap[k][0][0]) {
        j = k;
      } else {
        i = k;
      } 
      k = (i + j) / 2;
    } 
    if (paramInt == charMap[k][0][0])
      return k; 
    return -1;
  }
  
  static final CharacterData00 instance = new CharacterData00();
  
  static final char[][][] charMap;
  
  static final char[] X = "\000\020 0@P`p °ÀÐàðĀĐĠİŀŐŠŰŰƀƐƠưǀǐǠǰȀȐȠȰɀɐɠɰʀʐʠʰˀːʰʰˠ˰̠̀̐ʰʰ̰̀͐͠Ͱ΀ΐΐΠΐΰπϐϠϰЀАРарѐѠѰҀҐҠҰЀӀӐӠӰԀԐԠ԰ՀՐՠհր֐֠հְ׀אנװ؀ؐؠذـΐِ٠ٰΐڀڐڠڰۀې۠ΐ۰܀ܐܠܰ݀ݐݠ۰۰۰۰۰۰۰۰۰۰ݰ۰ހސޠ۰ް۰߀ߐߠ۰۰߰ࠀ۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰ࠐࠠ۰۰࠰ࡀࡐࡠࡰ۰ࢀ࢐ࢠࢰ۰ࣀ࣐۰࣠۰ࣰऀऐठर۰ीॐॠ॰۰ঀঐঠরΐΐী৐ৠৰ਀ਐ۰ਠ۰ਰੀ੐ΐΐ੠ੰ઀ઐઠરીઠŰૐૠ૰଀ଐଠରୀ୐ୠ୰஀ஐ஠ரீௐ௠௰ఀఐఠరీ౐ౠ౰ಀಐಠರೀ೐ೠ೰ഀഐഠരീ൐ൠॠ൰඀ඐචධවැॠॠॠॠॠ෠෰฀ॠॠॠฐॠภॠॠะॠॠเ๐ॠ๠๰ഐഐഐഐഐഐഐഐ຀຀຀຀ຐຠະເ໐໠໰ༀ༐༠༰ཀॠཐའΐΐΐΐΐ཰ྀྐྠྰ࿀࿐۰࿠࿰ကကတဠူΐΐ၀ॠॠၐॠॠॠॠॠॠၠၰႀ႐ؠ۰Ⴀࠀ۰ႰჀა۰۰რჰॠᄀᄐᄠᄰᅀᄠᅐᅠᅰഐഐഐᆀഐഐᆐᆠᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᇀॠॠᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᆰᇐΐᇠ۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰ᇰॠሀ੐۰۰۰۰۰۰۰۰ሐሠሰቀ۰۰ቐበተኀነአΐኰዀዐ۰ዠደጀጐጠጰፀፐऀπ፠፰ΐ۰ᎀ᎐Ꭰ۰ᎰᏀᏐᏠᏰΐΐΐΐ۰᐀۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰۰ᐐᐠᐰᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑀᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᑐᆰᆰᆰᑠᆰᑰᒀᒐᆰᆰᆰᒠᆰᆰᒰΐᓀᓐᓠʰʰᓰᔀʰʰʰʰʰʰʰʰʰʰᔐᔠʰᔰʰᕀᕐᕠᕰᖀᖐʰʰʰᖠᖰ ᗀᗐᗠᗰᘀᘐ"
    
    .toCharArray();
  
  static final char[] Y = "\000\000\000\000\002\004\006\000\000\000\000\000\000\000\b\004\n\f\016\020\022\024\026\030\032\032\032\032\032\034\036 \"$$$$$$$$$$$$&(*,............024\000\0006\000\000\000\000\000\000\000\000\000\000\000\000\0008::<>@BDFHJ\020LNPRTTTTTTTTTTTVTTTXZZZZZZZZZZZ\\ZZZ^````````````````````````b```dfffffffh```````````````````````jffhl``nprtvxpz|`~````f``fffffff````````` `¢````¤`````````¦¨ª¬®°`````²´¶¸º¼¾ÀÂÄÆÂÈÂÊÌÂÎÐÒÔÖØÚÜÜÜÜÞàââÜääæææææâäääääääÜÜèäääêìääääääääîîîîîîîîîîîîîîîîîîðîîîîîîîîîîîîîîîîîîîîî``ê`òôöøòòäúüþĀĂĄTTTTTTTTĆTTTTĈĊČZZZZZZZZĎZZZZĐĒĔĖĘĚ````````````ĜĞĠĢĤ`ĦĨĪĪĪĪĪĪĪĪTTTTTTTTTTTTTTTTZZZZZZZZZZZZZZZZĬĬĬĬĬĬĬĬ`Įîîİ```````````ĲffffffĴ````````````òòòòĶĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĺļľľľŀłłłłłłłłłłłłłłłłłłńņňòŊŌîîîîîîîîîîîîîîîŎŎŎŎŎŎŎŐŒŔŎŒòòòòŖŖŖŖŖŖŖŖŖŖŖŖŖŘòòŖŚŜòòòòòŞŞŠŢŤŦŨŪŎŎŎŎŎŬòŮŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŲŰŰŰŰŴŎŎŎŎŎŎŶŎŎŎŸŸŸŸŸźżŰžŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰƀŎŎŎƂƄŶŎƆƈƊîŶŰ\032\032\032\032\032ŰƌƎŮŮŮŮŮŮŮƐŴŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŎŎŎŎŎŎŎŎîîîîîƒƔŰŰŰŰŰŰŰŰŰŰŰŰŎŎŎŎŎžòòòòòòòƖƖƖƖƖŖŖŖŖŖŖŖŖŖŖŖŖŖŖŖŖƘîîîîƚ<\020ƜòòŖŖŖŖŖŖŖŖŖŖŖŎîƞŎŎŎŎƞŎƞŎƠòƢƢƢƢƢƢƢŜŖŖŖŖŖŖŖŖŖŖŖŖƘîòŜòòòòòòòòòòòòòòòòƤŰŰŰŰŰƤòòòòòòòòòòòŎŎŎîîîŎŎŎŎŎŎŎƦŎƨƨƪƬƮŎŎŎƨƬưƬƲîŶŎŎľƴƴƴƴƴƶƸƺƬƸƼƸƼƸƼƼƼòòƪƬƮŎƦƾǀƾưƼòòòƾòòƸŎòƴƴƴƴƴ:ǂǂǄǆòòƺƨƸƼòƸƼƸƼƼƸƼòƒƬƮƦòƺƦƺƠòƺòòòƸƼƼòòòƴƴƴƴƴŎǈòòòòòƺƨƸƸƸƼƼƸòƪƬƮŎŎƺƨƾưòƼòòòòòòòŎòƴƴƴƴƴǊòòòòòòòƼƼƸòƪƮƮŎƦƾǀƾưòòòòƨòòƸŎòƴƴƴƴƴǌǂǂǂòòòòòǎƸƼòƼòƸƼƼòƸƼòƼòòòƬƨǀòƬǀƬưòƼòòƾòòòòòòòƴƴƴƴƴǐǒŪŪǔǖòòƾƬƸƼƼƼƸòƸŎƨƬǀŎƦŎƠòòòƺƦòòòŎòƴƴƴƴƴòòòòǘǘǚǜòƬƸƼƼƼƸòƪǞƬƬǀǠǀƬƠòòòƾǀòòòƼŎòƴƴƴƴƴƸƼòòòòòòƼƸƬƮŎƦƬǀƬưƼòòòƾòòòòŎòƴƴƴƴƴǐǂǂòǢòƬƸƼòƸƸòƼòƒòƾƬŎƦƦƬƬƬƬòòòòòòòòòƬǤòòòòòƸǈŎŎŎƦòŊǦîîŶǨǪǪǪǪǪľòòƸƼƼƸƼƼƸòòòƸƸƸƸòƸǈŎŎŎƺǎòƼǬîîŶòǪǪǪǪǪòǮǰľľľľľľľǲǲǰîǰǰǰǴǴǴǴǴǂǂǂǂǂĮĮĮ\022\022ǶƸƼòƺŎŎŎŎŎŎƨŎîǨîǈŎŎŎŎŎƺŎŎŎŎŎŎŎŎŎŎŎŎŎŎŎŎŎƦǰǰǰǰǸǰǰǺǰľľǲǰǼǤòòǾƮŎƨŎŎƠưȀƮǎǴǴǴǴǴľľľƬŎŎǎȂȄǾȂǶǶǈŎǎƨƮȆǶǶȈȊǪǪǪǪǪǶƮǰȌȌȌȌȌȌȌȌȌȌȌȌȌȌȌȌȌȌȌȎòòȎòȐȒƼòƼƼòƼòƼòƼƼòƼƼòƼŌŶľľľľȔȖȖȖȖȘȚǂǂǂȜòŪŪŪŪŪòòòƼòòòòòȞȐȠȢȤȦòȐľȨȪòòòòòòòƼŎƒòòòòòŎǨǤòòòòŎòòòòòòƼƼŎòòòòòòîƮŎŎŎƬƬƬƬƨưîîîîîľƶľǊƲòǴǴǴǴǴòòòȬȬȬȬȬòòò\020\020\020Ȯ\020ȰîȲǪǪǪǪǪòòòȴòòòòǈƼòòòòòòòƼòŎƨƬƮƨƬòòƬƨƬƬưîòòǖò\020ƴƴƴƴƴòƼòòòòòòòƬƬƬƬƬƬƬƬȶƬòòòǪǪǪǪǪȸòŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪǈƨƬòľǾƨŎŎŎƦȀƨƮŎŎŎƨƬƬƮƠîîîƒŌǴǴǴǴǴòòòǪǪǪǪǪòòòľľľƶľľľòòòòòòòòòŎŎȶȀŎŎƨƨƬƬƨȄòòǪǪǪǪǪľľľǲǰǰǰǰĮîîîîǰǰǰǰǺòŎȶǾŎŎƬŎȈƬǪǪǪǪǪȀŎƬƮƮŎǶòòòòľľƬƬƬƬŎŎŎŎƬîòņľľǴǴǴǴǴòƸǪǪǪǪǪâââľľľľľòòòòîǨîîîîîîȺîîîƪƲƬƪƼòòòòÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜȼȾÂɀÜÜîîîƒòòòòòòòòòòîî```````````²²ɂɄɆɆɆɆɈɈɈɈɆɆɆòɈɈɈòɆɆɆɆɈɈɈɈɆɆɆɆɈɈɈɈɆɆɆòɈɈɈòɊɊɊɊɌɌɌɌɆɆɆɆɈɈɈɈɎɐɐɒɔɖɘò²²²²ɚɚɚɚ²²²²ɚɚɚɚ²²²²ɚɚɚɚɆ²ɜ²Ɉɞɠɢä²ɜ²ɤɤɠäɆ²ò²ɈɦɨäɆ²ɪ²Ɉɬɮäò²ɜ²ɰɲɠɴɶɶɶɸɶɺɼɾʀʀʀ\020ʂʄʂʄ\020\020\020\020ʆʈʈʊʌʌʎ\020ʐʒ\020ʔʖ\020ʘʚ\020\020\020\020\020ʜʖ\020\020\020\020ʞɼɼʠòòɼɼɼʢòHHHʤʦʨʪʪʪʪʪʤʦȦÜÜÜÜÜÜʬò:::::::::::::ʮòòòòòòòòòòîîîîîîʰİʲİʲîîîîîƒòòòòòòòŪʴŪʶŪʸĖĖʺʶŪʼĖĖŪŪŪʴʾʴȌĖˀĖ˂ÚŪĖ\036Ţʼ˄ŪˆPPPPPPPPˈˈˈˈˈˈˊˊˌˌˌˌˌˌˎˎː˒˔ː˖òòòŢŢ˘ŪŪŢŪŪ˘˄Ū˘ŪŪŪ˘ŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŢŪ˘˘ŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŢŢŢŢŢŢ˚˜\036Ţ˜˜˜Ţ˚˞˚\036Ţ˜˜˚˜\036\036\036Ţ˚˜˜˜˜ŢŢ˚˚˜˜˜˜˜˜˜˜\036ŢŢ˜˜ŢŢŢŢ˚\036\036˜˜˜˜Ţ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜\036˚˜\036ŢŢ\036ŢŢŢŢ˜Ţ˜˜˜˜˜˜˜˜˜\036ŢŢ˜ŢŢŢŢ˚˜˜Ţ˜ŢŢ˜˜˜˜˜˜˜˜˜˜˜˜Ţ˜˜˜˜˜˜˜˜ŪŪŪŪ˜˜ŪŪŪŪŪŪŪŪŪŪ˜ŪŪŪˠˢŪŪŪŪŪǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰˤ˘ŪŪŪŪŪŪŪŪŪŪŪ˦ŪŪ˄ŢŢŢŢŢŢŢŢŢŢŢŢŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŢŢŢŪŪŪŪŪŪŪŪŪòòòòòòŪŪŪǖòòòòòòòòòòòòŪŪŪŪŪǖòòòòòòòòòò˨˨˨˨˨˨˨˨˨˨˪˪˪˪˪˪˪˪˪˪ˬˬˬˬˬˬˬˬˬˬǰǰǰǰǰǰǰǰǰǰǰǰǰˮˮˮˮˮˮˮˮˮˮˮˮˮ˰˰˰˰˰˰˰˰˰˰˰˰˰˲˴˴˴˴˶˸˸˸˸˺ŪŪŪŪŪŪŪŪŪŪŪ˄ŪŪŪŪ˄ŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŢŢŢŢŪŪŪŪŪŪŪ˄ŪŪŪŪŪŪŪŪŪŪŪŪŪŪˤŪŪŪŪŪŪŪŪŪ˼ŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪŪ\022\022\022\022\022\022\022˾˾˾˾˾˨˨˨˨˨̀̀̀̀̀ŪŪŪŪŪŪ\036˚̂̄˜˚˜ŢŢ˚˜\036ŢŢ˜\036Ţ˜˜\022\022\022\022\022ŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢŢʦ̆̆̆̆̆̆̆̆̆̆̄˚˜˜˜˜˜˜˜˜˜˜ŢŢŢŢ\036ŢŢŢ˜˜˜Ţ˚ŢŢ˜˜\036˜Ţ\022\022\036Ţ˚˚˜Ţ˜ŢŢŢŢŢ˜˜˜Ţ\022ŢŢŢŢŢŢ˜˜˜˜˜˜˜˜˜\036˜˜Ţ\036\036˚˚˜\036ŢŢ˜ŢŢŢ˜\036ŢŢŢŢŢŢŢŢŢŢŢ˚\036ŢŢŢŢŢ˜ŢŢ˜˜˚\036˚\036Ţ˚˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜Ţ˜˜˜˜˚˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜\036ŢŢ\036\036Ţ˜˜\036ŢŢ˜\036Ţ˚Ţ˚˜˜˚ŢŪŪŪŪŪŪŪŪŢŢŢŢŢŢŢŢŢŢ˘˄ŢŢ̈òŪŪŪŪŪòòòĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĸĺłłłłłłłłłłłłłłłłłłłłłłł̊`Ȍª¬ff̌ȌɄ`dtÜȌ``̎ŪŪ̐f̒î`òò̔\020̖\020²²²²²²²²²²²²²²²²²²²̘òò̘òòòòļǤòòòòòòŌƼòòòòƼƼƼƼŎŎŎŎŎŎŎŎŎŎŎŎŎŎŎŎ\020̚̚\020ʐʒ̚\020\020\020\020̜\020Ȯ̚\020̚\022\022\022\022\020\020̞\020\020\020\020\020ʀòòŪŪŪŪŪŪŪŪŪŪŪŪŪ˼ŪŪŪŪŪŪŪŪŪŪŪŪòòòòòòŪŪŪŪŪŪŪŪŪŪŪòòòòòòòòòòòòòŪŪŪŪŪŪòò\n\020̢̠\022\022\022\022\022Ū\022\022\022\022̨̤̦̪̪̪̪îîǶ̬ââŪ̮̰̲ŪƼŌ̴̶Ȓ̲âȒòòƸòƸƼǰ̸̸ǰǰǰǰǰƼòòŪŪòòòòòòǰǰǰǰǰǰǰǰǰǰǰǰǰǰˤǖ̺̺̺̺̺ǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰ̼̾ǂǂ̀͂͂͂͂͂PPǰǰǰǰǰǰǰǰǰǰǰǰǰǰŪ˦ǰǰǰǰǰǰǰǰ̈́PPPPPPPǰǰǰǰǰǰŪŪǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǺǰǰǰǰǰǰǰǰǰǰǰˤŪ˦ǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰŪǰǰǰǰǰǰǰǰǰǰǰǰǰǰǰˤ͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆òòòòò͈͆͆͆͆͆͆òòòòòòòòòȴƼòŪŪŪŪŪŪŪŪŪŪŪǖòòòò͊\020ǴǴǴǴǴòòòòòòòòòò```````Ʋİ͌ŎŎŎŎî̞````````````òòòƺ͎͎͎͎͐îľľľòòòòäääääääääää͒ææææä``````````````````````ȼdf̌`````͔͖̌͘``òòòòòò`````͚òòòòòòòòòòòòòòòòòòòòòòÜƪƪƲǾƮƨŪŪòòǂǂǂǰ͜òòò\020\020òòòòƬƬƬƬƬƬƬƬƬƒòòòòľǪǪǪǪǪòòòîîîîîîîîîľȠòòǴǴǴǴǴŎŎƠîľǈŎŎŎŎŎȂòòòòòņƲƬŎŎƬƨƬ͞ľľľľľľļǪǪǪǪǪòòľǈŎŎƨƮƨƮƦòòòòǈƨòǪǪǪǪǪòľľȒǮǰȊòòǎŎǎǈǎƠƲƼòòòòòòòòòòòƸȴľǾŎƬľȴ͠ƒòòòòƸƼƸƼƸƼòòòòƼƼòòòòòòòòǾƮƬƨ͢ȈòǪǪǪǪǪòòòòòòòòòƼòƸòòͤͤͤͤͤͤͤͤͤͤͤͤͤͤͤͤͦͦͦͦͦͦͦͦͦͦͦͦͦͦͦͦ͆͆͆͆͆ͨ͆͆͆ͪ͆͆ͬ͆͆͆͆͆͆͆͆͆͆͆͆ͮ͆͆͆͆͆͆͆͆͆͆͆͆͆͆ͰͲ͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆ʹ͆͆͆͆͆͆͆͆ò͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆͆òòò²²²ɜòòòòò̘²²òòͶ͸ŖŖŖŖͺŖŖŖŖŖŖŘŖŖŘŘŖͶŘŖŖŖŖŖŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰͼͼͼͼͼͼͼͼòòòòòòòòƔŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰ;òòòòòòòòŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰòŰŰŰŰŰŰŰŰŰŰŰòòòòòòòòòòòòòòòòòòòòŰŰŰŰŰŰ΀òîîîîîîîî\020\020\020΂΄òòòîîîƒòòòò̜ΆΈΊΊΊΊΊΊΊ΄΂΄\020ʔΌ\034Ύΐ\020Β̆̆Δ\020Ζ˜̈ΘʎòòŰŰƤŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰŰƤΚ̔\f\016\020\022\024\026\030\032\032\032\032\032\034\036 ,............02ʦʚ\022\020ȒâƼòòòòƼò:Μǔʮ˄Ţ˘ǖòòòòΞΠŪò"
    
    .toCharArray();
  
  static final int[] A = new int[930];
  
  static final String A_DATA = "䠀ဏ䠀ဏ䠀ဏ堀䀏倀䀏堀䀏怀䀏倀䀏倀䀏倀䀏怀䀌栀\030栀\030⠀\030⠀怚⠀\030栀\030栀\030\025\026栀\030 \031㠀\030 \024㠀\030㠀\030᠀㘉᠀㘉㠀\030栀\030\031栀\031\031栀\030栀\030翡翡翡翡\025栀\030\026栀\033栀倗栀\033翢翢翢翢\025栀\031\026栀\031䠀ဏ䠀ဏ倀ဏ㠀\f栀\030⠀怚⠀怚栀\034栀\030栀\033栀\034\000瀅\035栀\031䠀တ栀\034栀\033⠀\034⠀\031᠀؋᠀؋栀\033߽瀂栀\033᠀ԋ\000瀅\036栀ࠋ栀ࠋ栀ࠋ栀\030瀁瀁瀁栀\031瀁߽瀂瀂瀂瀂栀\031瀂؝瀂\006瀁\005瀂߿Ρ瀂\000瀂\006瀁\005瀂\006瀁\005瀂߽瀂؞瀁\006瀁ӵ瀂͊瀁̺瀁\006瀁\005瀂̶瀁̶瀁\006瀁\005瀂\000瀂ľ瀁̪瀁̮瀁\006瀁̾瀁ٽ瀂͎瀁͆瀁յ瀂\000瀂͎瀁͖瀁׹瀂͚瀁ͪ瀁\006瀁\005瀂ͪ瀁\000瀂\000瀂\005瀂ͦ瀁ͦ瀁\006瀁\005瀂ͮ瀁\000瀂\000瀅\000瀂ܡ瀂\000瀅\000瀅\n\007\t\n\007\t\t\006瀁\005瀂Ľ瀂߽瀂\nپ瀁ܢ瀁׺瀁\000瀂߾瀁\006瀁\005瀂ն瀁߾瀁߽瀂߽瀂\006瀁\005瀂Ӷ瀁Ė瀁Ğ瀁߽瀂߽瀂߽瀂͉瀂̹瀂\000瀂̵瀂̵瀂\000瀂̩瀂\000瀂̭瀂̵瀂\000瀂\000瀂̽瀂\000瀂߽瀂߽瀂\000瀂ͅ瀂͍瀂\000瀂͍瀂͕瀂\000瀂\000瀂͙瀂ͩ瀂\000瀂\000瀂ͩ瀂ͩ瀂ĕ瀂ͥ瀂ͥ瀂ĝ瀂\000瀂ͭ瀂\000瀂\000瀅\000瀂\000瀄\000瀄\000瀄栀瀄栀瀄\000瀄\000瀄\000瀄栀\033栀\033栀瀄栀瀄\000瀄栀\033栀瀄栀\033\000瀄栀\033䀀〆䀀〆䀀〆䚱〆砀\000砀\000\000瀄׹瀂׹瀂׹瀂栀\030砀\000瀁栀\030瀁瀁瀁砀\000Ă瀁砀\000þ瀁þ瀁߽瀂瀁砀\000瀁瀂瀂瀂瀂߽瀂瀂}瀂瀂ā瀂ý瀂ý瀂\"瀁ù瀂å瀂\000瀁\000瀁\000瀁½瀂Ù瀂!瀂ř瀂Ł瀂ߥ瀂\000瀂ܒ瀁Ɓ瀂栀\031\006瀁\005瀂ߦ瀁\000瀂׺瀁׺瀁׺瀁ł瀁ł瀁Ł瀂Ł瀂\000\034䀀〆䀀\007䀀\007>瀁\006瀁\005瀂=瀂砀\000Â瀁Â瀁Â瀁Â瀁砀\000砀\000\000瀄\000\030\000\030砀\000Á瀂Á瀂Á瀂Á瀂߽瀂砀\000\000\030栀\024砀\000砀\000⠀怚砀\000䀀〆䀀〆䀀〆ࠀ\024䀀〆ࠀ\030䀀〆䀀〆ࠀ\030ࠀ瀅ࠀ瀅ࠀ瀅砀\000ࠀ瀅ࠀ\030ࠀ\030砀\000　တ　တ　တ砀\000栀\031栀\031က\031⠀\030⠀\030က怚㠀\030က\030栀\034栀\034䀀〆က\030က\030က\030က瀅က瀅က瀄က瀅က瀅䀀〆䀀〆䀀〆　㐉　㐉⠀\030　\030　\030က\030䀀〆က瀅က\030က瀅䀀〆　တ栀\034䀀〆䀀〆က瀄က瀄䀀〆䀀〆栀\034က瀅က\034က\034က瀅砀\000ကတ䀀〆砀\000砀\000က瀅ࠀ㐉ࠀ㐉ࠀ瀅䀀〆ࠀ瀄ࠀ瀄ࠀ瀄砀\000ࠀ瀄䀀〆䀀〆䀀〆ࠀ\030ࠀ\030က瀅砀\000䀀〆砀\000䀀〆\000〈䀀〆\000瀅\000〈\000〈\000〈䀀〆\000〈䀀〆\000瀅䀀〆\000㝉\000㝉\000\030\000瀄砀\000\000瀅砀\000䀀〆\000瀅砀\000砀\000\000〈\000〈砀\000\000ࠋ\000ࠋ\000ࠋ\000۫\000\034⠀怚\000瀅䀀〆\000\030⠀怚\000\034\000瀅䀀〆\000瀅\000݋\000ࠋ\000ࠋ栀\034栀\034⠀怚栀\034砀\000栀ԋ栀ԋ栀ҫ栀ҫ栀ҫ\000\034\000〈\000〆\000〆\000〈砀\000\000\034\000\030砀\000\000瀄䀀〆䀀〆\000\030\000㘉\000㘉\000瀄砀\000\000瀅\000\034\000\034\000\034\000\030\000\034\000㐉\000㐉\000〈\000〈䀀〆\000\034\000\034砀\000\000\034\000\030\000瀅\000〈䀀〆\000〈\000〈\000〈\000〈\000瀅䀀〆\000〈\000〈䀀〆\000瀅\000〈߾瀁߾瀁砀\000߾瀁\000瀅\000\030\000瀄\000瀅\000\030\000܋\000܋\000܋\000܋\000Ы\000Ջ\000ࠋ\000ࠋ砀\000栀\024\000瀅\000\030\000瀅怀䀌\000瀅\000瀅\025\026砀\000\000瑪\000瑪\000瑪砀\000栀؋栀؋栀\024栀\030栀\030䀀〆怀䀌砀\000\000瀅\000瀄\000〈\000瀅\000ӫ砀\000䀀〆\000〈\000瀄\000瀂\000瀄߽瀂\000瀂\000瀄߽瀂í瀂߾瀁\000瀂ߡ瀂ߡ瀂ߢ瀁ߢ瀁߽瀂ߡ瀂砀\000ߢ瀁ۙ瀂ۙ瀂ک瀂ک瀂ٱ瀂ٱ瀂؁瀂؁瀂ف瀂ف瀂؉瀂؉瀂߿߿߽瀂砀\000ۚ瀁ۚ瀁߿栀\033߽瀂栀\033ڪ瀁ڪ瀁ٲ瀁ٲ瀁砀\000栀\033߽瀂ߥ瀂ق瀁ق瀁ߦ瀁栀\033؂瀁؂瀁؊瀁؊瀁栀\033砀\000怀䀌怀䀌怀䀌怀\f怀䀌䠀တ䠀တ䠀တ\000တࠀတ栀\024栀\024栀\035栀\036栀\025栀\035怀䀍倀䀎砀တ砀တ砀တ㠀\f⠀\030⠀\030⠀\030栀\030栀\030\035\036栀\030栀\030栀倗栀倗栀\030㠀\031\025\026栀\030栀\031栀\030栀\030怀䀌䠀တ砀\000᠀؋\000瀄 \031 \031栀\031\025\026\000瀄᠀Ћ᠀Ћ\000瀄砀\000⠀怚砀\000䀀〆䀀\007䀀\007䀀〆\000瀁栀\034栀\034\000瀁\000瀂\000瀁\000瀁\000瀂栀\031\000瀁߾瀁栀\034⠀\034\000瀂r瀁\000瀁栀\034栀\031q瀂\000\034B琪B琪B砊B砊A瘪A瘪A砊A砊\000砊\000砊\000砊\006瀁\005瀂\000琪\000砊栀۫栀\031栀\034栀\031\031\031\031 \031⠀\031栀\034\025\026栀\034\000\034栀\034栀\034\000\034栀Ы栀Ы栀֫栀֫᠀ܫ᠀ܫj\034j\034i\034i\034栀ۋ栀Ћ栀Ћ栀Ћ栀Ћ栀֋栀֋栀֋栀֋栀Ы砀\000栀\034栀ի栀ի栀۫栀۫\031\025\026栀\031\026\025栀\031砀\000Á瀂砀\000\005瀂߾瀁\000瀂栀\034栀\034\006瀁\005瀂䀀〆砀\000栀\030栀\030栀ࠋ砀\000߽瀂\035\036栀\030栀\024栀\030栀瀄栀\034\000瀄\000瀅\000眪栀\024栀\025栀\026栀\026栀\034\000琊\000琊\000琊栀\024\000瀄\000癊\000睪\000璊\000瀄\000瀅栀\030䀀〆栀\033栀\033\000瀄\000׫\000׫\000Ы\000Ы\000ы\000ի\000ڋ\000ࠋ栀\034栀ҋ栀ҋ栀ҋ\000\034栀ࠋ\000瀅\000瀅\000瀅砀\000\000瀄栀\030䀀\007栀\030\000睪\000睪\000睪\000瘪栀\033栀瀄栀瀄\000\033\000\033\006瀁\000瀂砀\000߾瀁砀\000⠀怚⠀\034\000〈\000\030\000瀄\000〈\000〈\000\030\000\023\000\023\000\022\000\022\000瀅\000眅\000瀅\000盥\000畅\000瀅\000病\000瀅\000瀅\000皥\000瀅\000癥\000瀅\000疥砀\000ࠀ瀅䀀〆ࠀ瀅ࠀ瀅 \031က\033က\033栀\025栀\026က怚栀\034栀\030栀\025栀\026栀\030栀\024栀倗栀倗栀\025栀\026栀\025栀倗栀倗㠀\030砀\000栀\030㠀\030栀\024\025\026⠀\030 \031 \024栀\030⠀怚砀\000䠀တ栀\031栀\033砀\000栀တ栀တ栀တ";
  
  static final char[] B = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\001\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\005\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\000\004\000\004\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\004\000\004\000\000\000\000\000\000\004\000\000\000\004\000\000\000\004\000\000\004\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\000\000\000\000\000\004\000\004\004\000\000\004\004\004\004\004\000\000\000\000\000\000\000\000\000\000\004\000\000\000\004\004\000\000\000\000\000\000\000\000\004\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\004\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\001\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\002\002\002\001\001\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\006\005\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\020\000\000\000\000\000\020\020\020\000\000\020\020\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\020\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\000\000\000\000\000\020\020\020\020\020\020\020\020\020\020\020\020\020\020\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    
    .toCharArray();
  
  static {
    charMap = new char[][][] { 
        { { 'ß' }, { 'S', 'S' } }, { { 'İ' }, { 'İ' } }, { { 'ŉ' }, { 'ʼ', 'N' } }, { { 'ǰ' }, { 'J', '̌' } }, { { 'ΐ' }, { 'Ι', '̈', '́' } }, { { 'ΰ' }, { 'Υ', '̈', '́' } }, { { 'և' }, { 'Ե', 'Ւ' } }, { { 'ẖ' }, { 'H', '̱' } }, { { 'ẗ' }, { 'T', '̈' } }, { { 'ẘ' }, { 'W', '̊' } }, 
        { { 'ẙ' }, { 'Y', '̊' } }, { { 'ẚ' }, { 'A', 'ʾ' } }, { { 'ὐ' }, { 'Υ', '̓' } }, { { 'ὒ' }, { 'Υ', '̓', '̀' } }, { { 'ὔ' }, { 'Υ', '̓', '́' } }, { { 'ὖ' }, { 'Υ', '̓', '͂' } }, { { 'ᾀ' }, { 'Ἀ', 'Ι' } }, { { 'ᾁ' }, { 'Ἁ', 'Ι' } }, { { 'ᾂ' }, { 'Ἂ', 'Ι' } }, { { 'ᾃ' }, { 'Ἃ', 'Ι' } }, 
        { { 'ᾄ' }, { 'Ἄ', 'Ι' } }, { { 'ᾅ' }, { 'Ἅ', 'Ι' } }, { { 'ᾆ' }, { 'Ἆ', 'Ι' } }, { { 'ᾇ' }, { 'Ἇ', 'Ι' } }, { { 'ᾈ' }, { 'Ἀ', 'Ι' } }, { { 'ᾉ' }, { 'Ἁ', 'Ι' } }, { { 'ᾊ' }, { 'Ἂ', 'Ι' } }, { { 'ᾋ' }, { 'Ἃ', 'Ι' } }, { { 'ᾌ' }, { 'Ἄ', 'Ι' } }, { { 'ᾍ' }, { 'Ἅ', 'Ι' } }, 
        { { 'ᾎ' }, { 'Ἆ', 'Ι' } }, { { 'ᾏ' }, { 'Ἇ', 'Ι' } }, { { 'ᾐ' }, { 'Ἠ', 'Ι' } }, { { 'ᾑ' }, { 'Ἡ', 'Ι' } }, { { 'ᾒ' }, { 'Ἢ', 'Ι' } }, { { 'ᾓ' }, { 'Ἣ', 'Ι' } }, { { 'ᾔ' }, { 'Ἤ', 'Ι' } }, { { 'ᾕ' }, { 'Ἥ', 'Ι' } }, { { 'ᾖ' }, { 'Ἦ', 'Ι' } }, { { 'ᾗ' }, { 'Ἧ', 'Ι' } }, 
        { { 'ᾘ' }, { 'Ἠ', 'Ι' } }, { { 'ᾙ' }, { 'Ἡ', 'Ι' } }, { { 'ᾚ' }, { 'Ἢ', 'Ι' } }, { { 'ᾛ' }, { 'Ἣ', 'Ι' } }, { { 'ᾜ' }, { 'Ἤ', 'Ι' } }, { { 'ᾝ' }, { 'Ἥ', 'Ι' } }, { { 'ᾞ' }, { 'Ἦ', 'Ι' } }, { { 'ᾟ' }, { 'Ἧ', 'Ι' } }, { { 'ᾠ' }, { 'Ὠ', 'Ι' } }, { { 'ᾡ' }, { 'Ὡ', 'Ι' } }, 
        { { 'ᾢ' }, { 'Ὢ', 'Ι' } }, { { 'ᾣ' }, { 'Ὣ', 'Ι' } }, { { 'ᾤ' }, { 'Ὤ', 'Ι' } }, { { 'ᾥ' }, { 'Ὥ', 'Ι' } }, { { 'ᾦ' }, { 'Ὦ', 'Ι' } }, { { 'ᾧ' }, { 'Ὧ', 'Ι' } }, { { 'ᾨ' }, { 'Ὠ', 'Ι' } }, { { 'ᾩ' }, { 'Ὡ', 'Ι' } }, { { 'ᾪ' }, { 'Ὢ', 'Ι' } }, { { 'ᾫ' }, { 'Ὣ', 'Ι' } }, 
        { { 'ᾬ' }, { 'Ὤ', 'Ι' } }, { { 'ᾭ' }, { 'Ὥ', 'Ι' } }, { { 'ᾮ' }, { 'Ὦ', 'Ι' } }, { { 'ᾯ' }, { 'Ὧ', 'Ι' } }, { { 'ᾲ' }, { 'Ὰ', 'Ι' } }, { { 'ᾳ' }, { 'Α', 'Ι' } }, { { 'ᾴ' }, { 'Ά', 'Ι' } }, { { 'ᾶ' }, { 'Α', '͂' } }, { { 'ᾷ' }, { 'Α', '͂', 'Ι' } }, { { 'ᾼ' }, { 'Α', 'Ι' } }, 
        { { 'ῂ' }, { 'Ὴ', 'Ι' } }, { { 'ῃ' }, { 'Η', 'Ι' } }, { { 'ῄ' }, { 'Ή', 'Ι' } }, { { 'ῆ' }, { 'Η', '͂' } }, { { 'ῇ' }, { 'Η', '͂', 'Ι' } }, { { 'ῌ' }, { 'Η', 'Ι' } }, { { 'ῒ' }, { 'Ι', '̈', '̀' } }, { { 'ΐ' }, { 'Ι', '̈', '́' } }, { { 'ῖ' }, { 'Ι', '͂' } }, { { 'ῗ' }, { 'Ι', '̈', '͂' } }, 
        { { 'ῢ' }, { 'Υ', '̈', '̀' } }, { { 'ΰ' }, { 'Υ', '̈', '́' } }, { { 'ῤ' }, { 'Ρ', '̓' } }, { { 'ῦ' }, { 'Υ', '͂' } }, { { 'ῧ' }, { 'Υ', '̈', '͂' } }, { { 'ῲ' }, { 'Ὼ', 'Ι' } }, { { 'ῳ' }, { 'Ω', 'Ι' } }, { { 'ῴ' }, { 'Ώ', 'Ι' } }, { { 'ῶ' }, { 'Ω', '͂' } }, { { 'ῷ' }, { 'Ω', '͂', 'Ι' } }, 
        { { 'ῼ' }, { 'Ω', 'Ι' } }, { { 'ﬀ' }, { 'F', 'F' } }, { { 'ﬁ' }, { 'F', 'I' } }, { { 'ﬂ' }, { 'F', 'L' } }, { { 'ﬃ' }, { 'F', 'F', 'I' } }, { { 'ﬄ' }, { 'F', 'F', 'L' } }, { { 'ﬅ' }, { 'S', 'T' } }, { { 'ﬆ' }, { 'S', 'T' } }, { { 'ﬓ' }, { 'Մ', 'Ն' } }, { { 'ﬔ' }, { 'Մ', 'Ե' } }, 
        { { 'ﬕ' }, { 'Մ', 'Ի' } }, { { 'ﬖ' }, { 'Վ', 'Ն' } }, { { 'ﬗ' }, { 'Մ', 'Խ' } } };
    char[] arrayOfChar = "䠀ဏ䠀ဏ䠀ဏ堀䀏倀䀏堀䀏怀䀏倀䀏倀䀏倀䀏怀䀌栀\030栀\030⠀\030⠀怚⠀\030栀\030栀\030\025\026栀\030 \031㠀\030 \024㠀\030㠀\030᠀㘉᠀㘉㠀\030栀\030\031栀\031\031栀\030栀\030翡翡翡翡\025栀\030\026栀\033栀倗栀\033翢翢翢翢\025栀\031\026栀\031䠀ဏ䠀ဏ倀ဏ㠀\f栀\030⠀怚⠀怚栀\034栀\030栀\033栀\034\000瀅\035栀\031䠀တ栀\034栀\033⠀\034⠀\031᠀؋᠀؋栀\033߽瀂栀\033᠀ԋ\000瀅\036栀ࠋ栀ࠋ栀ࠋ栀\030瀁瀁瀁栀\031瀁߽瀂瀂瀂瀂栀\031瀂؝瀂\006瀁\005瀂߿Ρ瀂\000瀂\006瀁\005瀂\006瀁\005瀂߽瀂؞瀁\006瀁ӵ瀂͊瀁̺瀁\006瀁\005瀂̶瀁̶瀁\006瀁\005瀂\000瀂ľ瀁̪瀁̮瀁\006瀁̾瀁ٽ瀂͎瀁͆瀁յ瀂\000瀂͎瀁͖瀁׹瀂͚瀁ͪ瀁\006瀁\005瀂ͪ瀁\000瀂\000瀂\005瀂ͦ瀁ͦ瀁\006瀁\005瀂ͮ瀁\000瀂\000瀅\000瀂ܡ瀂\000瀅\000瀅\n\007\t\n\007\t\t\006瀁\005瀂Ľ瀂߽瀂\nپ瀁ܢ瀁׺瀁\000瀂߾瀁\006瀁\005瀂ն瀁߾瀁߽瀂߽瀂\006瀁\005瀂Ӷ瀁Ė瀁Ğ瀁߽瀂߽瀂߽瀂͉瀂̹瀂\000瀂̵瀂̵瀂\000瀂̩瀂\000瀂̭瀂̵瀂\000瀂\000瀂̽瀂\000瀂߽瀂߽瀂\000瀂ͅ瀂͍瀂\000瀂͍瀂͕瀂\000瀂\000瀂͙瀂ͩ瀂\000瀂\000瀂ͩ瀂ͩ瀂ĕ瀂ͥ瀂ͥ瀂ĝ瀂\000瀂ͭ瀂\000瀂\000瀅\000瀂\000瀄\000瀄\000瀄栀瀄栀瀄\000瀄\000瀄\000瀄栀\033栀\033栀瀄栀瀄\000瀄栀\033栀瀄栀\033\000瀄栀\033䀀〆䀀〆䀀〆䚱〆砀\000砀\000\000瀄׹瀂׹瀂׹瀂栀\030砀\000瀁栀\030瀁瀁瀁砀\000Ă瀁砀\000þ瀁þ瀁߽瀂瀁砀\000瀁瀂瀂瀂瀂߽瀂瀂}瀂瀂ā瀂ý瀂ý瀂\"瀁ù瀂å瀂\000瀁\000瀁\000瀁½瀂Ù瀂!瀂ř瀂Ł瀂ߥ瀂\000瀂ܒ瀁Ɓ瀂栀\031\006瀁\005瀂ߦ瀁\000瀂׺瀁׺瀁׺瀁ł瀁ł瀁Ł瀂Ł瀂\000\034䀀〆䀀\007䀀\007>瀁\006瀁\005瀂=瀂砀\000Â瀁Â瀁Â瀁Â瀁砀\000砀\000\000瀄\000\030\000\030砀\000Á瀂Á瀂Á瀂Á瀂߽瀂砀\000\000\030栀\024砀\000砀\000⠀怚砀\000䀀〆䀀〆䀀〆ࠀ\024䀀〆ࠀ\030䀀〆䀀〆ࠀ\030ࠀ瀅ࠀ瀅ࠀ瀅砀\000ࠀ瀅ࠀ\030ࠀ\030砀\000　တ　တ　တ砀\000栀\031栀\031က\031⠀\030⠀\030က怚㠀\030က\030栀\034栀\034䀀〆က\030က\030က\030က瀅က瀅က瀄က瀅က瀅䀀〆䀀〆䀀〆　㐉　㐉⠀\030　\030　\030က\030䀀〆က瀅က\030က瀅䀀〆　တ栀\034䀀〆䀀〆က瀄က瀄䀀〆䀀〆栀\034က瀅က\034က\034က瀅砀\000ကတ䀀〆砀\000砀\000က瀅ࠀ㐉ࠀ㐉ࠀ瀅䀀〆ࠀ瀄ࠀ瀄ࠀ瀄砀\000ࠀ瀄䀀〆䀀〆䀀〆ࠀ\030ࠀ\030က瀅砀\000䀀〆砀\000䀀〆\000〈䀀〆\000瀅\000〈\000〈\000〈䀀〆\000〈䀀〆\000瀅䀀〆\000㝉\000㝉\000\030\000瀄砀\000\000瀅砀\000䀀〆\000瀅砀\000砀\000\000〈\000〈砀\000\000ࠋ\000ࠋ\000ࠋ\000۫\000\034⠀怚\000瀅䀀〆\000\030⠀怚\000\034\000瀅䀀〆\000瀅\000݋\000ࠋ\000ࠋ栀\034栀\034⠀怚栀\034砀\000栀ԋ栀ԋ栀ҫ栀ҫ栀ҫ\000\034\000〈\000〆\000〆\000〈砀\000\000\034\000\030砀\000\000瀄䀀〆䀀〆\000\030\000㘉\000㘉\000瀄砀\000\000瀅\000\034\000\034\000\034\000\030\000\034\000㐉\000㐉\000〈\000〈䀀〆\000\034\000\034砀\000\000\034\000\030\000瀅\000〈䀀〆\000〈\000〈\000〈\000〈\000瀅䀀〆\000〈\000〈䀀〆\000瀅\000〈߾瀁߾瀁砀\000߾瀁\000瀅\000\030\000瀄\000瀅\000\030\000܋\000܋\000܋\000܋\000Ы\000Ջ\000ࠋ\000ࠋ砀\000栀\024\000瀅\000\030\000瀅怀䀌\000瀅\000瀅\025\026砀\000\000瑪\000瑪\000瑪砀\000栀؋栀؋栀\024栀\030栀\030䀀〆怀䀌砀\000\000瀅\000瀄\000〈\000瀅\000ӫ砀\000䀀〆\000〈\000瀄\000瀂\000瀄߽瀂\000瀂\000瀄߽瀂í瀂߾瀁\000瀂ߡ瀂ߡ瀂ߢ瀁ߢ瀁߽瀂ߡ瀂砀\000ߢ瀁ۙ瀂ۙ瀂ک瀂ک瀂ٱ瀂ٱ瀂؁瀂؁瀂ف瀂ف瀂؉瀂؉瀂߿߿߽瀂砀\000ۚ瀁ۚ瀁߿栀\033߽瀂栀\033ڪ瀁ڪ瀁ٲ瀁ٲ瀁砀\000栀\033߽瀂ߥ瀂ق瀁ق瀁ߦ瀁栀\033؂瀁؂瀁؊瀁؊瀁栀\033砀\000怀䀌怀䀌怀䀌怀\f怀䀌䠀တ䠀တ䠀တ\000တࠀတ栀\024栀\024栀\035栀\036栀\025栀\035怀䀍倀䀎砀တ砀တ砀တ㠀\f⠀\030⠀\030⠀\030栀\030栀\030\035\036栀\030栀\030栀倗栀倗栀\030㠀\031\025\026栀\030栀\031栀\030栀\030怀䀌䠀တ砀\000᠀؋\000瀄 \031 \031栀\031\025\026\000瀄᠀Ћ᠀Ћ\000瀄砀\000⠀怚砀\000䀀〆䀀\007䀀\007䀀〆\000瀁栀\034栀\034\000瀁\000瀂\000瀁\000瀁\000瀂栀\031\000瀁߾瀁栀\034⠀\034\000瀂r瀁\000瀁栀\034栀\031q瀂\000\034B琪B琪B砊B砊A瘪A瘪A砊A砊\000砊\000砊\000砊\006瀁\005瀂\000琪\000砊栀۫栀\031栀\034栀\031\031\031\031 \031⠀\031栀\034\025\026栀\034\000\034栀\034栀\034\000\034栀Ы栀Ы栀֫栀֫᠀ܫ᠀ܫj\034j\034i\034i\034栀ۋ栀Ћ栀Ћ栀Ћ栀Ћ栀֋栀֋栀֋栀֋栀Ы砀\000栀\034栀ի栀ի栀۫栀۫\031\025\026栀\031\026\025栀\031砀\000Á瀂砀\000\005瀂߾瀁\000瀂栀\034栀\034\006瀁\005瀂䀀〆砀\000栀\030栀\030栀ࠋ砀\000߽瀂\035\036栀\030栀\024栀\030栀瀄栀\034\000瀄\000瀅\000眪栀\024栀\025栀\026栀\026栀\034\000琊\000琊\000琊栀\024\000瀄\000癊\000睪\000璊\000瀄\000瀅栀\030䀀〆栀\033栀\033\000瀄\000׫\000׫\000Ы\000Ы\000ы\000ի\000ڋ\000ࠋ栀\034栀ҋ栀ҋ栀ҋ\000\034栀ࠋ\000瀅\000瀅\000瀅砀\000\000瀄栀\030䀀\007栀\030\000睪\000睪\000睪\000瘪栀\033栀瀄栀瀄\000\033\000\033\006瀁\000瀂砀\000߾瀁砀\000⠀怚⠀\034\000〈\000\030\000瀄\000〈\000〈\000\030\000\023\000\023\000\022\000\022\000瀅\000眅\000瀅\000盥\000畅\000瀅\000病\000瀅\000瀅\000皥\000瀅\000癥\000瀅\000疥砀\000ࠀ瀅䀀〆ࠀ瀅ࠀ瀅 \031က\033က\033栀\025栀\026က怚栀\034栀\030栀\025栀\026栀\030栀\024栀倗栀倗栀\025栀\026栀\025栀倗栀倗㠀\030砀\000栀\030㠀\030栀\024\025\026⠀\030 \031 \024栀\030⠀怚砀\000䠀တ栀\031栀\033砀\000栀တ栀တ栀တ".toCharArray();
    assert arrayOfChar.length == 1860;
    byte b1 = 0, b2 = 0;
    while (b1 < '݄') {
      int i = arrayOfChar[b1++] << 16;
      A[b2++] = i | arrayOfChar[b1++];
    } 
  }
}
