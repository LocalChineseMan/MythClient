package notthatuwu.xyz.mythrecode.modules.exploit;

import java.util.concurrent.ConcurrentLinkedQueue;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import notthatuwu.xyz.mythrecode.api.event.EventTarget;
import notthatuwu.xyz.mythrecode.api.module.Category;
import notthatuwu.xyz.mythrecode.api.module.Module;
import notthatuwu.xyz.mythrecode.api.module.Module.Info;
import notthatuwu.xyz.mythrecode.api.module.settings.impl.NumberSetting;
import notthatuwu.xyz.mythrecode.api.utils.TimeHelper;
import notthatuwu.xyz.mythrecode.api.utils.server.PacketUtil;
import notthatuwu.xyz.mythrecode.events.EventSendPacket;
import notthatuwu.xyz.mythrecode.events.EventUpdate;

@Info(name = "PingSpoof", description = "Spoofs your Ping for the Server!", category = Category.EXPLOIT)
public class PingSpoof extends Module {
  public NumberSetting delay = new NumberSetting("Delay", this, 1500.0D, 1.0D, 10000.0D, true);
  
  final TimeHelper timeHelper = new TimeHelper();
  
  final ConcurrentLinkedQueue<Packet<? extends INetHandler>> packetQueue = new ConcurrentLinkedQueue<>();
  
  @EventTarget
  public void onUpdate(EventUpdate event) {
    if (this.packetQueue.isEmpty()) {
      this.timeHelper.reset();
      return;
    } 
    if (this.timeHelper.hasReached(this.delay.getValueLong())) {
      this.packetQueue.forEach(PacketUtil::sendPacketSilent);
      this.packetQueue.clear();
      this.timeHelper.reset();
    } 
  }
  
  @EventTarget
  public void onSendPacket(EventSendPacket event) {
    Packet<? extends INetHandler> packet = event.getPacket();
    if (MC.isSingleplayer())
      return; 
    if (packet instanceof net.minecraft.network.play.client.C0FPacketConfirmTransaction || packet instanceof net.minecraft.network.play.client.C00PacketKeepAlive) {
      this.packetQueue.add(packet);
      event.setCancelled(true);
    } 
  }
  
  public void onDisable() {
    super.onDisable();
    this.timeHelper.reset();
    if (!this.packetQueue.isEmpty()) {
      this.packetQueue.forEach(PacketUtil::sendPacketNoEvent);
      this.packetQueue.clear();
    } 
  }
}
